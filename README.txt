This is a tool for stitching together Minecraft maps that have different areas generated by different algorithms causing ugly transitions, for example when using an existing map from Minecraft 1.7 in Minecraft 1.8.

The tool is inspired by the bestofboth script and follows the same basic idea, check it out at:
https://github.com/gmcnew/pymclevel

It also relies on the very excellent pymclevel to do its map editing, you can find it at:
https://github.com/codewarrior0/pymclevel


As with all these sorts of things, use this tool at your own risk. Everything will probably be fine, but if it all goes horribly wrong I can't be held responsible.


How it works
------------

A river is placed at the boundaries between the old and new map areas, and the surrounding valley is smoothed seamlessly together with adjacent chunks. The smoothing is done with a low pass filter that means every chunk will have its own unique appearance.

Two phases are used to perform the work. First the original map is traced with mcmerge to find the contour of the edge of the existing world. Then continue playing on the map (with your new version of Minecraft) to generate additional areas. Finally mcmerge is used to smooth chunks at the boundary between the old and new areas.

I have included some test files in the appropriately named testfiles directory that you can use to run this script on.


Setting up
----------

To use this tool you will first need to install Python and some libraries. This tool has not been tested with Python 3.0 so Python 2.7 is recommended. You can get the latest version from her:

http://www.python.org/download/

If you're downloading Python for Windows, it is recommended you install the plain version rather than the X86-64 version as some of the libraries required only come precompiled in 32-bit versions.


Once you have Python installed you will need to install the NumPy library (and optionally SciPy). You can find the download links at:
http://new.scipy.org/download.html

Both NumPy and SciPy have pre-built installable packages for Windows and OS X on the SourceForge pages linked from the above page. Grab the latest version and you're ready to go.

I mentioned before that SciPy is optional. You will only need it if you use the 'gauss' filter option. This is not used by default so you can ignore it.


Merging your world
----------------

Once you have the required bits installed, you can download this tool then fire up the command line and cd over to the location of the script. Then follow these steps:

1. Backup your world directory. If you or the tool breaks something you'll be able to recover. You can find your singleplayer maps in the following locations:
   
   windows: %AppData%\.minecraft\saves
   Linux: $HOME/.minecraft/saves
   OS X: Probably the same as Linux?

2. Run the contour trace phase on the original map, for example (use the correct world name for you):

   python merge.py --trace %AppData%\.minecraft\saves\World

   This places the file contour.dat in the world directory which will be read when merging.

3. Play some Minecraft to generate the new areas bordering with your old map.

4. Run the merging phase. You can tweak various parameters for the best look. Using the default configuration this will look something like the following (again, make sure you specify the correct world directory):

   python merge.py --trace %AppData%\.minecraft\saves\World

5. This is optional. The tool used to save the level doesn't always get the lighting right leading to some very dark looking areas. You can probably fix this up using MCEdit by relighting the boundary chunks.

6. Get back into the game and watch the floating debris disappear.

You can repeat steps 4 - 6 as many times as you need as the tool will keep track of which border areas haven't yet had new areas generated next to them.



Configuration
-------------

To see what options are available for you to fiddle with type: python merge.py --help

A few things worth mentioning. Firstly there are two filters, there is 'smooth' and 'gauss'. The 'smooth' filter is the default (it's a perfect frequency filter). The gaussian filter gives more regular results and can perform much stronger smoothing, how it also tends to look more boring. Note that the --smooth factor means different things for both these filters (for the 'smooth' filter, bigger means less smohting, where as for 'gauss' it's the reverse), however both will give similar results for a value of 1.7.

You can also fiddle with how wide the river and the valley the river flows through are, the height of the river and the height of the river bank (specified with --valley-height), and the sea level at which water will be placed. Finally there's an option for how much the river and valley should be narrowed when a river flows on both sides of a chunk.


Happy merging!